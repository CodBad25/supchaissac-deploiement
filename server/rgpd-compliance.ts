// üõ°Ô∏è MODULE DE CONFORMIT√â RGPD
// Gestion des droits des personnes et de la protection des donn√©es

import { getStorage } from "./storage-instance";
import { User } from "@shared/schema";

export interface RGPDRequest {
  userId: number;
  requestType: 'ACCESS' | 'RECTIFICATION' | 'ERASURE' | 'PORTABILITY';
  requestDate: Date;
  status: 'PENDING' | 'PROCESSED' | 'REJECTED';
  reason?: string;
}

export class RGPDCompliance {
  
  // üìã Article 15 RGPD - Droit d'acc√®s
  async exportUserData(userId: number): Promise<any> {
    const storage = getStorage();
    
    try {
      // R√©cup√©rer toutes les donn√©es de l'utilisateur
      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error("Utilisateur non trouv√©");
      }

      const sessions = await storage.getSessionsByTeacher(userId);
      const teacherSetup = await storage.getTeacherSetup(userId);

      // Donn√©es export√©es (format JSON)
      const userData = {
        exportDate: new Date().toISOString(),
        user: {
          id: user.id,
          username: user.username,
          name: user.name,
          role: user.role,
          initials: user.initials,
          inPacte: user.inPacte,
          // Mot de passe exclu pour s√©curit√©
        },
        sessions: sessions.map(session => ({
          id: session.id,
          date: session.date,
          timeSlot: session.timeSlot,
          type: session.type,
          status: session.status,
          createdAt: session.createdAt,
          updatedAt: session.updatedAt,
        })),
        teacherSetup: teacherSetup ? {
          inPacte: teacherSetup.inPacte,
          signature: teacherSetup.signature ? "Signature pr√©sente" : "Aucune signature",
        } : null,
        legalBasis: "Int√©r√™t l√©gitime - Gestion administrative des heures suppl√©mentaires",
        retentionPeriod: "5 ans apr√®s fin de relation contractuelle",
        dataController: {
          name: process.env.SCHOOL_NAME || "√âtablissement scolaire",
          address: process.env.SCHOOL_ADDRESS || "Adresse non configur√©e",
          email: process.env.SCHOOL_EMAIL || "contact@etablissement.fr",
          dpo: {
            name: process.env.DPO_NAME || "DPO non d√©sign√©",
            email: process.env.DPO_EMAIL || "dpo@etablissement.fr"
          }
        }
      };

      // Log de l'export pour audit
      console.log(`üìä Export RGPD effectu√© pour l'utilisateur ${user.username} (ID: ${userId})`);
      
      return userData;
    } catch (error) {
      console.error("‚ùå Erreur export RGPD:", error);
      throw error;
    }
  }

  // üóëÔ∏è Article 17 RGPD - Droit √† l'effacement
  async deleteUserData(userId: number, reason: string): Promise<boolean> {
    const storage = getStorage();
    
    try {
      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error("Utilisateur non trouv√©");
      }

      // V√©rifier si l'effacement est possible (obligations l√©gales)
      const canDelete = await this.canDeleteUserData(userId);
      if (!canDelete.allowed) {
        throw new Error(`Effacement impossible: ${canDelete.reason}`);
      }

      // Supprimer les donn√©es dans l'ordre
      // 1. Sessions de l'utilisateur
      const sessions = await storage.getSessionsByTeacher(userId);
      for (const session of sessions) {
        await storage.deleteSession(session.id);
      }

      // 2. Configuration enseignant
      const teacherSetup = await storage.getTeacherSetup(userId);
      if (teacherSetup) {
        await storage.deleteTeacherSetup(userId);
      }

      // 3. Utilisateur lui-m√™me
      await storage.deleteUser(userId);

      // Log de la suppression pour audit
      console.log(`üóëÔ∏è Suppression RGPD effectu√©e pour l'utilisateur ${user.username} (ID: ${userId}). Raison: ${reason}`);
      
      return true;
    } catch (error) {
      console.error("‚ùå Erreur suppression RGPD:", error);
      throw error;
    }
  }

  // üîç V√©rifier si les donn√©es peuvent √™tre supprim√©es
  private async canDeleteUserData(userId: number): Promise<{allowed: boolean, reason?: string}> {
    const storage = getStorage();
    
    try {
      // V√©rifier s'il y a des sessions en cours de traitement
      const sessions = await storage.getSessionsByTeacher(userId);
      const pendingSessions = sessions.filter(s => 
        s.status === 'PENDING_REVIEW' || 
        s.status === 'PENDING_VALIDATION' || 
        s.status === 'VALIDATED'
      );

      if (pendingSessions.length > 0) {
        return {
          allowed: false,
          reason: `${pendingSessions.length} session(s) en cours de traitement. Finaliser d'abord le processus.`
        };
      }

      // V√©rifier la p√©riode de r√©tention l√©gale
      const retentionYears = parseInt(process.env.DATA_RETENTION_YEARS || "5");
      const oldestSession = sessions.reduce((oldest, session) => {
        const sessionDate = new Date(session.createdAt);
        return sessionDate < oldest ? sessionDate : oldest;
      }, new Date());

      const retentionEndDate = new Date(oldestSession);
      retentionEndDate.setFullYear(retentionEndDate.getFullYear() + retentionYears);

      if (new Date() < retentionEndDate) {
        return {
          allowed: false,
          reason: `P√©riode de r√©tention l√©gale non √©coul√©e (jusqu'au ${retentionEndDate.toLocaleDateString('fr-FR')})`
        };
      }

      return { allowed: true };
    } catch (error) {
      return {
        allowed: false,
        reason: `Erreur lors de la v√©rification: ${error.message}`
      };
    }
  }

  // üìù Article 16 RGPD - Droit de rectification
  async updateUserData(userId: number, updates: Partial<User>): Promise<boolean> {
    const storage = getStorage();
    
    try {
      const user = await storage.getUser(userId);
      if (!user) {
        throw new Error("Utilisateur non trouv√©");
      }

      // Filtrer les champs autoris√©s √† la modification
      const allowedFields = ['name', 'username', 'initials'];
      const filteredUpdates = Object.keys(updates)
        .filter(key => allowedFields.includes(key))
        .reduce((obj, key) => {
          obj[key] = updates[key];
          return obj;
        }, {} as any);

      if (Object.keys(filteredUpdates).length === 0) {
        throw new Error("Aucun champ modifiable fourni");
      }

      await storage.updateUser(userId, filteredUpdates);

      // Log de la modification pour audit
      console.log(`‚úèÔ∏è Rectification RGPD effectu√©e pour l'utilisateur ${user.username} (ID: ${userId}). Champs: ${Object.keys(filteredUpdates).join(', ')}`);
      
      return true;
    } catch (error) {
      console.error("‚ùå Erreur rectification RGPD:", error);
      throw error;
    }
  }

  // üìä G√©n√©rer un rapport de conformit√©
  async generateComplianceReport(): Promise<any> {
    const storage = getStorage();
    
    try {
      const users = await storage.getUsers();
      const allSessions = await storage.getSessions();

      const report = {
        generatedAt: new Date().toISOString(),
        dataController: {
          name: process.env.SCHOOL_NAME || "√âtablissement scolaire",
          dpo: process.env.DPO_NAME || "DPO non d√©sign√©"
        },
        statistics: {
          totalUsers: users.length,
          totalSessions: allSessions.length,
          usersByRole: users.reduce((acc, user) => {
            acc[user.role] = (acc[user.role] || 0) + 1;
            return acc;
          }, {} as Record<string, number>),
          sessionsByStatus: allSessions.reduce((acc, session) => {
            acc[session.status] = (acc[session.status] || 0) + 1;
            return acc;
          }, {} as Record<string, number>)
        },
        dataRetention: {
          policy: `${process.env.DATA_RETENTION_YEARS || 5} ans`,
          oldestData: allSessions.length > 0 ? 
            Math.min(...allSessions.map(s => new Date(s.createdAt).getTime())) : null
        },
        securityMeasures: {
          passwordHashing: "bcrypt (12 rounds)",
          sessionSecurity: "Secure cookies, HTTPS only",
          accessControl: "Role-based permissions",
          auditLogging: "Enabled"
        }
      };

      return report;
    } catch (error) {
      console.error("‚ùå Erreur g√©n√©ration rapport RGPD:", error);
      throw error;
    }
  }
}

export const rgpdCompliance = new RGPDCompliance();
